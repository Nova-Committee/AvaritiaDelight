plugins {
    id "net.neoforged.moddev.legacyforge"
    id "maven-publish"
}

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

Map<String, String> commonSystemProperties = [
        'forge.logging.console.level': 'info',
        "mixin.debug.export"         : "false",
        "mixin.config"               : "${mod_id}.mixins.json"
]

legacyForge {
    version = "${minecraft_version}-${forge_version}"
    parchment {
        minecraftVersion = "${minecraft_version}"
        mappingsVersion = "${mapping_version}"
    }
//    validateAccessTransformers = true
//    accessTransformers = [
//            "src/main/resources/META-INF/accesstransformer.cfg"
//    ]
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }


    runs {
        configureEach {
            gameDirectory = project.file('run')
            systemProperties.putAll(commonSystemProperties)
            jvmArguments.addAll(
                    "--add-opens", "java.base/sun.security.util=ALL-UNNAMED",
                    "--add-opens", "java.base/java.util.jar=ALL-UNNAMED"
            )
        }
        client {
            client()
        }
        server {
            server()
        }
        data {
            data()
            programArguments.addAll(
                    '--mod', "${mod_id}",
                    '--all',
                    '--output', file('src/generated/resources/').absolutePath,
                    '--existing', file('src/main/resources').absolutePath
            )
        }
    }

    addModdingDependenciesTo(sourceSets.test)
}

mixin {
    var refmap = add sourceSets.main, "${mod_id}.refmap.json"
    jar.from refmap
    config "${mod_id}.mixins.json"
}

jar {
    manifest {
        attributes([
                "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://mvn.devos.one/releases/" }
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }
    maven { url = "https://maven.blamejared.com/" }
    maven { url = "https://modmaven.dev" }
    maven { url = "https://maven.terraformersmc.com/" }
    maven { url = "https://maven.kessokuteatime.work/releases" }
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.0"))
    implementation("io.github.llamalad7:mixinextras-forge:0.2.0")

    modImplementation("maven.modrinth:re-avaritia:$rootProject.avaritia_forge_version")
    modImplementation("maven.modrinth:farmers-delight:$rootProject.delight_forge_version")

    modCompileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modCompileOnly("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    modCompileOnly("dev.emi:emi-forge:${emi_version}:api")
    if (recipe_viewer == "jei")
        modRuntimeOnly("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    else if (recipe_viewer == "emi")
        modRuntimeOnly("dev.emi:emi-forge:${emi_version}")
    else
        throw new IllegalArgumentException("Unknown recipe viewer: " + recipe_viewer)

    modRuntimeOnly("maven.modrinth:jupiter:ZmYt4jjp")
    modRuntimeOnly("com.iafenvoy.integration:integration-forge:0.2")
    modRuntimeOnly("maven.modrinth:tooltips-reforged:xpFeqLCi")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [version: mod_version,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
